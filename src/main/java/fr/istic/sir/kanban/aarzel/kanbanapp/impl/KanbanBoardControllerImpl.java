package fr.istic.sir.kanban.aarzel.kanbanapp.impl;

import fr.istic.sir.kanban.aarzel.api.KanbanApi;
import fr.istic.sir.kanban.aarzel.kanbanapp.configuration.KanbanConfiguration;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.boards.DeleteKanbanBoardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.boards.GetKanbanBoardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.boards.PostKanbanBoardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.boards.UpdateKanbanBoardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.cards.DeleteKanbanCardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.cards.GetKanbanCardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.cards.PostKanbanCardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.cards.UpdateKanbanCardsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.sections.DeleteKanbanSectionsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.sections.GetKanbanSectionsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.sections.PostKanbanSectionsService;
import fr.istic.sir.kanban.aarzel.kanbanapp.services.sections.UpdateKanbanSectionsService;
import fr.istic.sir.kanban.aarzel.model.KanbanBoardDTO;
import fr.istic.sir.kanban.aarzel.model.KanbanCardDTO;
import fr.istic.sir.kanban.aarzel.model.KanbanSectionDTO;
import lombok.SneakyThrows;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 * Controller of the KanbanApplication.
 * This controller extends the KanbanApi generated by Swagger inputs,
 * and redefines its methods.
 * The controller will each time call a service and return an HTTP response.
 */
@RestController
@Transactional
public class KanbanBoardControllerImpl implements KanbanApi {

    /**
     * The Kanban Configuration
     */
    @Autowired
    private KanbanConfiguration kanbanConfiguration;

    /**
     * The service used for : GET KanbanBoards
     */
    @Autowired
    private GetKanbanBoardsService getKanbanBoardsService;

    /**
     * The service used for : POST KanbanBoard
     */
    @Autowired
    private PostKanbanBoardsService postKanbanBoardService;

    /**
     * The service used for : DELETE KanbanBoard
     */
    @Autowired
    private DeleteKanbanBoardsService deleteKanbanBoardsService;

    /**
     * The service used for : UPDATE KanbanBoard
     */
    @Autowired
    private UpdateKanbanBoardsService updateKanbanBoardsService;

    /**
     * The service used for : GET KanbanSections
     */
    @Autowired
    private GetKanbanSectionsService getKanbanSectionsService;

    /**
     * The service used for : POST KanbanSections
     */
    @Autowired
    private PostKanbanSectionsService postKanbanSectionsService;

    /**
     * The service used for : DELETE KanbanSections
     */
    @Autowired
    private DeleteKanbanSectionsService deleteKanbanSectionsService;

    /**
     * The service used for : UPDATE KanbanSections
     */
    @Autowired
    private UpdateKanbanSectionsService updateKanbanSectionsService;

    /**
     * The service used for : GET KanbanCards
     */
    @Autowired
    private GetKanbanCardsService getKanbanCardsService;

    /**
     * The service used for : POST KanbanCards
     */
    @Autowired
    private PostKanbanCardsService postKanbanCardsService;

    /**
     * The service used for : DELETE KanbanCards
     */
    @Autowired
    private DeleteKanbanCardsService deleteKanbanCardsService;

    /**
     * The service used for : UPDATE KanbanCards
     */
    @Autowired
    private UpdateKanbanCardsService updateKanbanCardsService;

    /**
     * The application LOGGER is defined here and will be used by each service.
     * Logs are printed and saved in a local file, so we can debug the application if needed.
     */
    private static final Logger LOGGER = LogManager.getLogger(KanbanBoardControllerImpl.class);

    /**
     * Controller's implementation for : GET OneKanbanBoard
     *
     * @param boardId of the KanbanBoard to retrieve.
     * @return the KanbanBoardDTO.
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanBoardDTO> getOneKanbanBoardById(Long boardId) {
        KanbanBoardDTO kanbanBoardDTO = getKanbanBoardsService.getOneKanbanBoardById(boardId, LOGGER);
        return new ResponseEntity<>(kanbanBoardDTO, HttpStatus.OK);
    }

    /**
     * Controller's implementation for : POST OneKanbanBoard
     *
     * @param boardId        id of the KanbanBoard to create.
     * @param kanbanBoardDTO content passed from the client to be added in database.
     * @return the created KanbanBoard
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanBoardDTO> createOneKanbanBoardById(Long boardId, KanbanBoardDTO kanbanBoardDTO) {
        KanbanBoardDTO kanbanBoardDTOSaved = postKanbanBoardService.
                createOneKanbanBoardById(boardId, kanbanBoardDTO, LOGGER);
        return new ResponseEntity<>(kanbanBoardDTOSaved, HttpStatus.CREATED);
    }

    /**
     * Controller's implementation for : PUT OneKanbanBoard
     *
     * @param boardId        id of the KanbanBoard to update.
     * @param kanbanBoardDTO content passed from the client to be updated in database.
     * @return the updated KanbanBoard
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanBoardDTO> putOneKanbanBoardById(Long boardId, KanbanBoardDTO kanbanBoardDTO) {
        KanbanBoardDTO kanbanBoardDTOUpdated = updateKanbanBoardsService.putOneKanbanBoardByExternalId(boardId, kanbanBoardDTO, LOGGER);
        return new ResponseEntity<>(kanbanBoardDTOUpdated, HttpStatus.CREATED);
    }

    /**
     * Controller's implementation for : DELETE OneKanbanBoard
     *
     * @param boardId id of the KanbanBoard to delete
     * @return an empty HTTP response
     */
    @Override
    @SneakyThrows
    public ResponseEntity<Void> deleteOneKanbanBoardById(Long boardId) {
        deleteKanbanBoardsService.deleteOneKanbanBoardByExternalId(boardId, LOGGER);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Controller's implementation for : GET ManyKanbanBoards
     *
     * @return all the KanbanBoard in database
     */
    @Override
    @SneakyThrows
    public ResponseEntity<List<KanbanBoardDTO>> getManyKanbanBoards() {
        List<KanbanBoardDTO> kanbanBoardDTOS = getKanbanBoardsService.getManyKanbanBoards(LOGGER);
        return new ResponseEntity<>(kanbanBoardDTOS, HttpStatus.OK);
    }

    /**
     * Controller's implementation for : DELETE ManyKanbanBoards
     *
     * @return an empty HTTP response
     */
    @Override
    @SneakyThrows
    public ResponseEntity<Void> deleteAllKanbanBoards() {
        deleteKanbanBoardsService.deleteAllKanbanBoards(LOGGER);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Controller's implementation for : GET OneKanbanSectionByKanbanBoard
     *
     * @param boardId   id of the KanbanBoard
     * @param sectionId id of the section KanbanSection
     * @return the KanbanSection
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanSectionDTO> getKanbanSectionByKanbanBoard(Long boardId, Long sectionId) {
        KanbanSectionDTO kanbanSection = getKanbanSectionsService.getKanbanSectionByKanbanBoard(boardId, sectionId, LOGGER);
        return new ResponseEntity<>(kanbanSection, HttpStatus.OK);
    }

    /**
     * Controller's implementation for : POST OneKanbanSectionByKanbanBoard
     *
     * @param boardId          id of the KanbanBoard
     * @param sectionId        id of the KanbanSection
     * @param kanbanSectionDTO Kanban section to create
     * @return the created KanbanSection
     */
    @SneakyThrows
    @Override
    public ResponseEntity<KanbanSectionDTO> createOneKanbanSectionInKanbanBoard(Long boardId, Long sectionId, KanbanSectionDTO kanbanSectionDTO) {
        KanbanSectionDTO kanbanSection = postKanbanSectionsService.createOneKanbanSectionInKanbanBoard(boardId, kanbanSectionDTO, LOGGER);
        return new ResponseEntity<>(kanbanSection, HttpStatus.CREATED);
    }

    /**
     * Controller's implementation for : PUT OneKanbanSectionByKanbanBoard
     *
     * @param boardId          id of the KanbanBoard
     * @param sectionId        id of the KanbanSection
     * @param kanbanSectionDTO Kanban section to update
     * @return the updated KanbanSection
     */
    @SneakyThrows
    @Override
    public ResponseEntity<KanbanSectionDTO> updateOneKanbanSectionInKanbanBoard(Long boardId, Long sectionId, KanbanSectionDTO kanbanSectionDTO) {
        KanbanSectionDTO kanbanSectionDTOUpdated = updateKanbanSectionsService.updateOneKanbanSectionInKanbanBoard(boardId, sectionId, kanbanSectionDTO, LOGGER);
        return new ResponseEntity<>(kanbanSectionDTOUpdated, HttpStatus.CREATED);
    }

    /**
     * Controller's implementation for : DELETE OneKanbanSectionByKanbanBoard
     *
     * @param boardId   id of the KanbanBoard
     * @param sectionId id of the KanbanSection
     * @return an empty HTTP response.
     */
    @SneakyThrows
    @Override
    public ResponseEntity<Void> deleteOneKanbanSectionInKanbanBoard(Long boardId, Long sectionId) {
        deleteKanbanSectionsService.deleteOneKanbanSectionInKanbanBoard(boardId, sectionId, LOGGER);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Controller's implementation for : GET ManyKanbanSectionsByKanbanBoard
     *
     * @param boardId id of the KanbanBoard
     * @return all the KanbanSections in a KanbanBoard
     */
    @SneakyThrows
    @Override
    public ResponseEntity<List<KanbanSectionDTO>> getKanbanSectionsByKanbanBoard(Long boardId) {
        List<KanbanSectionDTO> kanbanSectionDTOList = getKanbanSectionsService.getKanbanSectionsByKanbanBoard(boardId, LOGGER);
        return new ResponseEntity<>(kanbanSectionDTOList, HttpStatus.OK);
    }

    /**
     * Controller's implementation for : DELETE ManyKanbanSectionsByKanbanBoard
     *
     * @param boardId id of the KanbanBoard (required)
     * @return an empty HTTP response.
     */
    @SneakyThrows
    @Override
    public ResponseEntity<Void> deleteKanbanSectionsByKanbanBoard(Long boardId) {
        deleteKanbanSectionsService.deleteKanbanSectionsByKanbanBoard(boardId, LOGGER);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Controller's implementation for : GET OneKanbanCardByKanbanSection
     *
     * @param boardId   id of the KanbanBoard
     * @param sectionId id of the KanbanSection
     * @param cardId    id of the KanbanCard
     * @return the KanbanCard
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanCardDTO> getOneKanbanCardByKanbanSection(Long boardId, Long sectionId, Long cardId) {
        KanbanCardDTO kanbanCard = getKanbanCardsService.getOneKanbanCardByKanbanSection(boardId, sectionId, cardId, LOGGER);
        return new ResponseEntity<>(kanbanCard, HttpStatus.OK);
    }

    /**
     * Controller's implementation for : POST OneKanbanCardByKanbanSection
     *
     * @param boardId       id of the KanbanBoard
     * @param sectionId     id of the KanbanSection
     * @param cardId        id of the KanbanCard
     * @param kanbanCardDTO the KanbanCard to create
     * @return the created KanbanCard
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanCardDTO> createOneKanbanCardByKanbanSection(Long boardId, Long sectionId, Long cardId, KanbanCardDTO kanbanCardDTO) {
        KanbanCardDTO kanbanCard = postKanbanCardsService.createOneKanbanCardByKanbanSection(boardId, sectionId, cardId, kanbanCardDTO, LOGGER);
        return new ResponseEntity<>(kanbanCard, HttpStatus.CREATED);
    }

    /**
     * Controller's implementation for : UPDATE OneKanbanCardByKanbanSection
     *
     * @param boardId       id of the KanbanBoard
     * @param sectionId     id of the KanbanSection
     * @param cardId        id of the KanbanCard
     * @param kanbanCardDTO the KanbanCard to create
     * @return the updated KanbanCard
     */
    @Override
    @SneakyThrows
    public ResponseEntity<KanbanCardDTO> updateOneKanbanCardByKanbanSection(Long boardId, Long sectionId, Long cardId, KanbanCardDTO kanbanCardDTO) {
        KanbanCardDTO kanbanCard = updateKanbanCardsService.updateOneKanbanCardByKanbanSection(boardId, sectionId, cardId, kanbanCardDTO, LOGGER);
        return new ResponseEntity<>(kanbanCard, HttpStatus.CREATED);
    }

    /**
     * Controller's implementation for : DELETE OneKanbanCardByKanbanSection
     *
     * @param boardId   id of the KanbanBoard
     * @param sectionId id of the KanbanSection
     * @param cardId    id of the KanbanCard
     * @return an empty HTTP response.
     */
    @SneakyThrows
    @Override
    public ResponseEntity<Void> deleteOneKanbanCardByKanbanSection(Long boardId, Long sectionId, Long cardId) {
        deleteKanbanCardsService.deleteOneKanbanCardByKanbanSection(boardId, sectionId, cardId, LOGGER);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Controller's implementation for : GET ManyKanbanCardsByKanbanSection
     *
     * @param boardId   id of the KanbanBoard
     * @param sectionId id of the KanbanSection
     * @return the KanbanCards
     */
    @SneakyThrows
    @Override
    public ResponseEntity<List<KanbanCardDTO>> getKanbanCardsByKanbanSection(Long boardId, Long sectionId) {
        List<KanbanCardDTO> kanbanCards = getKanbanCardsService.getKanbanCardsByKanbanSection(boardId, sectionId, LOGGER);
        return new ResponseEntity<>(kanbanCards, HttpStatus.OK);
    }

    /**
     * Controller's implementation for : DELETE ManyKanbanCardsByKanbanSection
     *
     * @param boardId   id of the KanbanBoard
     * @param sectionId id of the KanbanSection
     * @return an empty HTTP response.
     */
    @SneakyThrows
    @Override
    public ResponseEntity<Void> deleteKanbanCardsByKanbanSection(Long boardId, Long sectionId) {
        deleteKanbanCardsService.deleteKanbanCardsByKanbanSection(boardId, sectionId, LOGGER);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}
